{"version":3,"sources":["components/Dashboard/Dashboard.module.css","components/Controls/Controls.module.css","components/Balance/Balance.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Controls/Controls.js","components/Balance/Balance.js","components/TransactionHistory/TransactionHistory.js","components/Dashboard/Dashboard.js","components/App.js","index.js"],"names":["module","exports","Controls","state","value","handleChange","e","setState","target","reset","this","props","onDeposit","onWithdraw","className","styles","controls","type","name","onChange","onClick","Component","defaultProps","Balance","income","expenses","balance","TransactionHistory","items","history","map","item","key","id","amount","date","toast","configure","autoClose","draggable","Dashboard","transactions","Number","errorInput","addTransaction","typeTransaction","newTransaction","shortId","generate","newDate","setTimeout","updateState","forEach","transaction","infoError","error","position","POSITION","TOP_LEFT","Date","toLocaleString","dashboard","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec27abb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__1Ilwz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__2Ahrl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__Zp56R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__1v_WV\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Controls.module.css';\n\nexport default class Controls extends Component {\n  static defaultProps = {};\n\n  state = {\n    value: '',\n  };\n\n  handleChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  reset = () => {\n    this.setState({ value: '' });\n  };\n\n  render() {\n    const { onDeposit, onWithdraw } = this.props;\n    const { value } = this.state;\n    return (\n      <section className={styles.controls}>\n        <input\n          type=\"number\"\n          name=\"amount\"\n          value={value}\n          onChange={this.handleChange}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            onDeposit(value);\n            this.reset();\n          }}\n        >\n          Deposit\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => {\n            onWithdraw(value);\n            this.reset();\n          }}\n        >\n          Withdraw\n        </button>\n      </section>\n    );\n  }\n}\n\nControls.propTypes = {\n  onDeposit: PropTypes.func.isRequired,\n  onWithdraw: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Balance.module.css';\n\nconst Balance = ({ income, expenses, balance }) => {\n  return (\n    <section className={styles.balance}>\n      <span> ⬆ {income}$</span>\n      <span>⬇ {expenses}$</span>\n      <span> Balance {balance}: $</span>\n    </section>\n  );\n};\n\nBalance.propTypes = {\n  income: PropTypes.number.isRequired,\n  expenses: PropTypes.number.isRequired,\n  balance: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ items }) => {\n  return (\n    <table className={styles.history}>\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map(item => (\n          <tr key={item.id}>\n            <td>{item.type}</td>\n            <td>{item.amount}$</td>\n            <td>{item.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React, { Component } from 'react';\nimport shortId from 'shortid';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport styles from './Dashboard.module.css';\nimport Controls from '../Controls/Controls';\nimport Balance from '../Balance/Balance';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\n\ntoast.configure({\n  autoClose: 3500,\n  draggable: false,\n});\n\nexport default class Dashboard extends Component {\n  state = {\n    transactions: [],\n    balance: 0,\n    income: 0,\n    expenses: 0,\n  };\n\n  onDeposit = amount => {\n    if (amount === '' || Number(amount) <= 0) {\n      this.errorInput('input zerro');\n    } else {\n      this.addTransaction(amount, 'deposit');\n    }\n  };\n\n  onWithdraw = amount => {\n    if (amount === '' || Number(amount) <= 0) {\n      this.errorInput('input zerro');\n    } else if (amount > this.state.balance) {\n      this.errorInput('no balanse');\n    } else {\n      this.addTransaction(amount, 'withdrawal');\n    }\n  };\n\n  addTransaction = (amount, typeTransaction) => {\n    const newTransaction = {\n      id: shortId.generate(),\n      type: typeTransaction,\n      amount: Number(amount),\n      date: this.newDate(),\n    };\n    this.setState(state => ({\n      transactions: [...state.transactions, newTransaction],\n    }));\n    setTimeout(this.updateState, 0.1);\n  };\n\n  updateState = () => {\n    const { transactions } = this.state;\n    let income = 0;\n    let expenses = 0;\n\n    transactions.forEach(transaction => {\n      if (transaction.type === 'deposit') {\n        income += transaction.amount;\n      } else {\n        expenses += transaction.amount;\n      }\n    });\n    this.setState({\n      balance: income - expenses,\n      income,\n      expenses,\n    });\n  };\n\n  errorInput = infoError => {\n    if (infoError === 'input zerro') {\n      toast.error('Введите сумму для проведения операции !', {\n        position: toast.POSITION.TOP_LEFT,\n      });\n    }\n    if (infoError === 'no balanse') {\n      toast.error('На счету недостаточно средств для проведения операции!', {\n        position: toast.POSITION.TOP_LEFT,\n      });\n    }\n  };\n\n  newDate = () => {\n    const date = new Date();\n    return date.toLocaleString();\n  };\n\n  render() {\n    const { balance, income, expenses, transactions } = this.state;\n    return (\n      <div className={styles.dashboard}>\n        <Controls onDeposit={this.onDeposit} onWithdraw={this.onWithdraw} />\n        <Balance balance={balance} income={income} expenses={expenses} />\n        <TransactionHistory items={transactions} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Dashboard from './Dashboard/Dashboard';\n\nconst App = () => (\n  <>\n    <Dashboard />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}